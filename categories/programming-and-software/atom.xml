<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming & Software | David Xia]]></title>
  <link href="https://www.davidxia.com/categories/programming-and-software/atom.xml" rel="self"/>
  <link href="https://www.davidxia.com/"/>
  <updated>2018-11-11T17:28:21-05:00</updated>
  <id>https://www.davidxia.com/</id>
  <author>
    <name><![CDATA[David Xia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Upstream Kubernetes Java Models Is Much Better Than Raw YAML]]></title>
    <link href="https://www.davidxia.com/2018/11/using-upstream-kubernetes-java-models-is-much-better-than-raw-yaml/"/>
    <updated>2018-11-11T17:11:38-05:00</updated>
    <id>https://www.davidxia.com/2018/11/using-upstream-kubernetes-java-models-is-much-better-than-raw-yaml</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a while since I blogged about something tech related, but I had some
free time today.</p>

<p>Recently, I&rsquo;ve been trying to refactor an internal Spotify deployment tool my
team built and maintains. This deployment tool takes Kubernetes (k8s) YAML
manifests, changes them, and essentially runs <code>kubectl apply</code>. We add metadata
to the k8s manifests like labels.</p>

<p>Right now this tool receives the input YAML as strings, converts them to
Jackson ObjectNodes, and manipulates those ObjectNodes. The disadvantage of
this is that there&rsquo;s no k8s type-safety. We might accidentally add a field to a
Deployment that isn&rsquo;t valid or remove something from a Service that&rsquo;s required.</p>

<p>My refactor uses upstream k8s model classes from <a href="https://github.com/kubernetes-client/java">kubernetes-client/java</a>
which are themselves <a href="https://github.com/kubernetes-client/gen">generated</a> from the official Swagger spec. Here&rsquo;s a
helpful Yaml utility class that deserializes YAML strings into concrete classes
and can also serialize them back into YAML strings. So helpful.</p>

<p>Unfortunately, there&rsquo;s some bugs in the YAML (de)serialization that prevent me
from finishing this effort.</p>

<ul>
<li><a href="https://github.com/kubernetes-client/java/pull/417">kubernetes-client/java</a></li>
<li><a href="https://github.com/kubernetes-client/java/issues/431">kubernetes-client/java</a></li>
<li><a href="https://github.com/kubernetes-client/java/issues/340">kubernetes-client/java</a></li>
</ul>


<p>Nonetheless, it&rsquo;ll be much nicer to change k8s resources in a type-safe way
instead of parsing and rewriting raw YAML strings.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Useful Site for TLS Server Test]]></title>
    <link href="https://www.davidxia.com/2017/05/useful-site-for-testing-tls-server-configuration/"/>
    <updated>2017-05-20T12:49:20-04:00</updated>
    <id>https://www.davidxia.com/2017/05/useful-site-for-testing-tls-server-configuration</id>
    <content type="html"><![CDATA[<p>My home server&rsquo;s hard disk&rsquo;s partition map was somehow corrupted. So I&rsquo;m serving this website
from <a href="https://m.do.co/c/74c553045962">Digital Ocean</a> for now instead of my apartment. While rewriting the nginx server configs,
I found this useful site that <a href="https://www.ssllabs.com/ssltest/index.html">tests your server&rsquo;s TLS configuration</a>. It&rsquo;ll give you a grade
and warn you of weak encryption, key exchange protocols, cipher suites, etc.</p>

<p><a href="https://mozilla.github.io/server-side-tls/ssl-config-generator/">Mozilla&rsquo;s TLS configuration generator</a> is useful for providing secure defaults.</p>

<p>I&rsquo;m proud to say this site has an A.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My QCon NYC 2016 Slides - Reach Production Faster With Containers in Testing]]></title>
    <link href="https://www.davidxia.com/2016/06/my-qcon-nyc-2016-slides/"/>
    <updated>2016-06-20T17:15:49-04:00</updated>
    <id>https://www.davidxia.com/2016/06/my-qcon-nyc-2016-slides</id>
    <content type="html"><![CDATA[<p>Here are the slides from my <a href="https://qconnewyork.com/ny2016/presentation/reaching-production-faster-with-containers-in-testing">QCon NYC 2016 talk titled &ldquo;Reach Production Faster with Containers in
Testing.&rdquo;</a> in various formats. <span xmlns:dct="http://purl.org/dc/terms/" property="dct:title">All formats of &ldquo;Reach Production Faster with Containers in Testing&rdquo;</span> by <a xmlns:cc="http://creativecommons.org/ns#" href="https://www.davidxia.com/2016/06/my-qcon-nyc-2016-slides-reach-production-faster-with-containers-in-testing/" property="cc:attributionName" rel="cc:attributionURL">David Xia</a> are licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">Creative Commons Attribution-ShareAlike 4.0 International License</a>.</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/key/p1uEfRmocwplbk" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/DavidXia/qcon-nyc-2016-reach-production-faster-with-containers-in-testing" title="QCon NYC 2016: Reach Production Faster with Containers in Testing" target="_blank">QCon NYC 2016: Reach Production Faster with Containers in Testing</a> </strong> from <strong><a href="//www.slideshare.net/DavidXia" target="_blank">David Xia</a></strong> </div></p>

<p>More formats here:</p>

<ul>
<li><a href="https://drive.google.com/file/d/0By_v8MtsRMKkSloyT3gxalRuYjQ/view?usp=sharing">PDF</a></li>
<li><a href="https://drive.google.com/file/d/0By_v8MtsRMKkSm9BVW5uWFR5TFk/view?usp=sharing">Keynote</a></li>
<li><a href="https://drive.google.com/file/d/0By_v8MtsRMKkRkpQWk5paUZOUW8/view?usp=sharing">PowerPoint</a></li>
</ul>


<p>{% img center <a href="https://i.imgur.com/w0P47Ugl.jpg">https://i.imgur.com/w0P47Ugl.jpg</a> 640 619 %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PGP Best Practices - How to Create Strong and Secure Keys]]></title>
    <link href="https://www.davidxia.com/2015/05/pgp-best-practices-how-to-create-strong-and-secure-keys/"/>
    <updated>2015-05-02T00:00:00-04:00</updated>
    <id>https://www.davidxia.com/2015/05/pgp-best-practices-how-to-create-strong-and-secure-keys</id>
    <content type="html"><![CDATA[<p>I <a href="https://www.davidxia.com/2013/09/intro-to-public-key-cryptography-and-gpg/" title="Intro to public key cryptography and GPG">wrote about PGP</a> a while ago and showed how to generate a key. Since then I&rsquo;ve managed to do what
you should never, ever do: forget your key&rsquo;s passphrase. And I didn&rsquo;t generate a revocation cert to
boot. So I was screwed and had to generate a new one. Forunately not many, and by &ldquo;not many&rdquo; I mean
zero, people were using that public key which I had uploaded to public keyservers.</p>

<p>I generated a new one and spent a lot of time reading about PGP best practices. Here&rsquo;s what I
learned.</p>

<!-- more -->


<h2>How to Generate Strong Keys and Secure Them</h2>

<ul>
<li>Use GnuPG version &gt;= 1.4 to make it easier to generate and manage keys

<ul>
<li>You can <code>brew install gpg2</code> on a Mac</li>
</ul>
</li>
<li>Append the following to <code>~/.gnupg/gpg.conf</code> (or whatever the latest strongest encryption
algorithms are):</li>
</ul>


<pre><code>personal-digest-preferences SHA256
cert-digest-algo SHA256
default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed
</code></pre>

<ul>
<li><code>gpg --gen-key</code></li>
<li>Choose 1 at this prompt</li>
</ul>


<pre><code>Please select what kind of key you want:
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (sign only)
   (4) RSA (sign only)
</code></pre>

<ul>
<li>Set an expiration date of at most two years (you can always extend it)</li>
<li>Set a strong passphrase that you&rsquo;ll remember!</li>
<li>Use the maximum number of bits for your key</li>
<li>Generate revocation cert(s)

<ul>
<li><code>gpg --gen-revoke &lt;key id&gt;</code> key id can be the portion of the fingerprint you see in
<code>gpg --list-keys</code> or the uid if it&rsquo;s unique</li>
</ul>
</li>
<li>Use subkeys for encryption (this is automatically done if you choose 1 above) and another for
signing. The following was copied from the <a href="https://wiki.debian.org/Subkeys" title="Debian wiki - subkeys">Debian wiki</a>.

<ul>
<li>Here&rsquo;s the best paragraph from that wiki page:</li>
</ul>
</li>
</ul>


<p>{% blockquote_nobr subkeys <a href="https://wiki.debian.org/Subkeys">https://wiki.debian.org/Subkeys</a> %}
You should keep your private master key very, very safe. However, keeping all your keys extremely
safe is inconvenient: every time you need to sign a new package upload, you need to copy the
packages onto suitable portable media, go into your sub-basement, prove to the armed guards that
you&rsquo;re you by using several methods of biometric and other identification, go through a deadly
maze, feed the guard dogs the right kind of meat, and then finally open the safe, get out the
signing laptop, and sign the packages. Then do the reverse to get back up to your Internet
connection for uploading the packages.
{% endblockquote_nobr %}</p>

<ul>
<li><code>gpg --edit-key &lt;your master key id&gt;</code></li>
<li>At the prompt, enter <code>addkey</code></li>
<li>Enter passphrase</li>
<li>Choose the &ldquo;RSA (sign only)&rdquo; key type and pick the maximum bits</li>
<li>Choose an expiry date</li>
<li><code>save</code></li>
<li>Backup the <code>~/.gnupg</code> directory and store it somewhere secure and offline.
Do this before deleting the private master key in the next step.</li>
<li>Check <code>gpg --export-secret-key &lt;your master key id&gt; | gpg --list-packets</code> does not show
<code>gnu-dummy 52K, algo: 0, ...</code>. This means your private master key is there.</li>
<li><code>gpg --export-secret-subkeys &lt;your master key id&gt; &gt; secret-subkeys</code></li>
<li><code>gpg --delete-secret-key &lt;your master key id&gt;</code></li>
<li><code>gpg --import secret-subkeys</code></li>
<li>Verify that <code>gpg -K</code> shows a &ldquo;sec#&rdquo; instead of just &ldquo;sec&rdquo; for your private key. That means the
secret key is not really there. You can see the presence of a dummy OpenPGP packet if you run
<code>gpg --export-secret-key &lt;your master key id&gt; | gpg --list-packets</code>.</li>
<li><code>gpg --keyserver some.keyserver.com --send-keys &lt;your master key id&gt;</code> to publish it to the world</li>
</ul>


<h2>How to Revoke</h2>

<p>If you ever need to revoke your keys,</p>

<pre><code>gpg --import path/to/revocation-cert
gpg --keyserver some.keyserver.com --send-key &lt;key id&gt;
</code></pre>

<h2>How to Sign Other People&rsquo;s keys</h2>

<p>Sign their key with a certain level of trust.</p>

<pre><code>gpg -u david@davidxia.com --sign-key --ask-cert-level harvey@harveyxia.com
</code></pre>

<p>Export the signed key and email it back to the signee.</p>

<pre><code>gpg --armor --output 00AA11BB-signedBy-1A2B3C4D.asc --export 00AA11BB
</code></pre>

<p>The signee needs to import the signed key</p>

<pre><code>gpg --import 1A2B3C4D-signedBy-00AA11BB.asc
</code></pre>

<p>and send your certification to the keyserver.</p>

<pre><code>gpg --send-key 1A2B3C4D
</code></pre>

<h2>Encrypting messages</h2>

<pre><code>gpg -u david@davidxia.com --recipient harvey@harveyxia.com --output msg.asc --encrypt msg
</code></pre>

<p>Recipients decrypt with <code>gpg -u harvey@harveyxia.com --output msg --decrypt msg.asc</code>.</p>

<h2>Signing messages</h2>

<pre><code>gpg -u david@davidxia.com --output msg.sig --detach-sign msg
</code></pre>

<p>Recipients verify with <code>gpg --verify msg.sig msg</code>. They should see &ldquo;Good signature from&hellip;&rdquo;</p>

<h2>References</h2>

<ul>
<li>a super readable introduction titled <a href="http://www.pgpi.org/doc/pgpintro/" title="How PGP Works">&ldquo;How PGP Works&rdquo;</a></li>
<li>More info <a href="http://ekaia.org/blog/2009/05/10/creating-new-gpgkey/" title="Creating a new GPG Key">here</a>, <a href="https://alexcabal.com/creating-the-perfect-gpg-keypair/" title="Creating the Perfect GPG Keypair">here</a>, and <a href="https://help.riseup.net/en/security/message-security/openpgp/best-practices" title="OpenPGP Best Practices">here</a> on best practices</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Turn the Internet Upside Down]]></title>
    <link href="https://www.davidxia.com/2015/03/how-to-turn-the-internet-upside-down/"/>
    <updated>2015-03-15T00:00:00-04:00</updated>
    <id>https://www.davidxia.com/2015/03/how-to-turn-the-internet-upside-down</id>
    <content type="html"><![CDATA[<p>I read <a href="http://www.ex-parrot.com/pete/upside-down-ternet.html" title="upside down ternet">this web page</a> many years ago that described how someone used their unencrypted WiFi
network to prank neighbors by turning all images upside down or making them blurry or simply
redirecting them to cats. I always wanted to do it myself, but I didn&rsquo;t have the required knowledge
or hardware until now.</p>

<p>In <a href="/2015/03/how-to-install-dd-wrt-on-an-asus-rt-n16-router/" title="How to install DD-WRT on on Asus RT-N16 router">my previous post</a>, I wrote about how I installed DD-WRT onto my <a href="http://www.amazon.com/gp/product/B00387G6R8/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00387G6R8&amp;linkCode=as2&amp;tag=easiamus00-20&amp;linkId=6TECRA3HNZATDC4U" title="Asus RT-N16">Asus RT-N16 wireless
router</a>. You might be able to do this prank with the factory default firmware for your router.
Your firmware needs to let you do the steps in <a href="http://www.alexlaird.com/2013/03/dd-wrt-guest-wireless/" title="DD-WRT guest wireless">this awesome tutorial</a> to create a separate
guest WiFi network and add custom iptables rules. If it doesn&rsquo;t, get a better router or flash
better firmware.</p>

<!-- more -->


<p>Install the squid3 proxy caching server on a computer on the LAN using <a href="https://help.ubuntu.com/community/Upside-Down-TernetHowTo" title="Ubuntu Upside down ternet HowTo">this tutorial from
Ubuntu</a>. Instead of using the Apache web server and that Perl script (which didn&rsquo;t work for me),
I used Nginx and wrote an analogous Python script. I skipped their &ldquo;Networking Setup&rdquo; section
because I need to setup iptables rules in my router to redirect all traffic from the guest WiFi to
the squid proxy host. I setup a new subdomain &ldquo;newsubdomain.davidxia.com&rdquo; to point to the
proxy host and added the Nginx configuration for it as shown below.</p>

<pre><code class="python Python script for squid url_rewrite_program">#!/usr/bin/env python

import os
import subprocess
import sys
import urllib
import uuid


IMG_DIR = '/var/www/images/'
BASE_URL = 'http://newsubdomain.davidxia.com/'


def modify_url(line):
    list = line.split(' ')
    # The first element of the list is the requested URL.
    old_url = list[0]

    # The returned needs to contain a '\n' at the end.
    # A '\n' by itself means do not rewrite the URL.
    new_url = '\n'

    # If the requested URL is a JPG, save it to a file on the proxy host, flip it upside down,
    # and give the user the URL to the upside down image. :p
    if old_url.lower().endswith('.jpg'):
        img_file_name = str(uuid.uuid4()) + '.jpg'
        img_file_path = os.path.join(IMG_DIR, img_file_name)
        try:
            urllib.urlretrieve(old_url, img_file_path)
            subprocess.check_output(['/usr/bin/mogrify', '-flip', img_file_path])
            new_url = BASE_URL + img_file_name + '\n'
        except urllib.ContentTooShortError:
            # TODO log this and return original URL
            pass
        except subprocess.CalledProcessError:
            # TODO log and return original URL and delete the image file
            pass
    return new_url

while True:
    # The format of the line read from stdin is
    # URL ip-address/fqdn ident method, e.g. http://saini.co.in 172.17.8.175/saini.co.in - GET -
    line = sys.stdin.readline().strip()

    # new_url is a simple URL only, e.g. http://fedora.co.in
    new_url = modify_url(line)
    sys.stdout.write(new_url)
    sys.stdout.flush()
</code></pre>

<pre><code class="plain Nginx config">server {
  server_name images.davidxia.com;
  root /var/www/images;

  access_log /var/log/nginx/images.davidxia.com-access.log;
  error_log /var/log/nginx/images.davidxia.com-error.log;

  index index.html;

  location ~* \.(?:gif|jpe?g|png)$ {
    expires 30d;
    add_header Pragma public;
    add_header Cache-Control "public";
  }
}
</code></pre>

<p>In the <a href="https://help.ubuntu.com/community/Upside-Down-TernetHowTo#Configuration" title="Ubuntu Upside down ternet HowTo - configuration">squid configuration section</a>, be sure to have <code>acl localnet src &lt;network range&gt;</code> where
<code>network range</code> is 192.168.2.1/24 if you used the aforementioned tutorial. Make sure you can
make HTTP requests to the proxy on localhost:3128 in order to debug. If you can&rsquo;t, you might need to
add extra ACL rules to the squid conf file (something like <code>http_access allow localnet</code>).</p>

<p>I found <a href="http://www.dd-wrt.com/wiki/index.php/Squid_Transparent_Proxy#Proxy_Server_on_the_LAN_Subnet" title="squid transparent proxy - proxy server on the LAN subnet">instructions</a> to configure the router&rsquo;s firewall rules but realized my setup
was different. I don&rsquo;t want to proxy traffic from my regular WiFi subnet 192.168.1.1/24 to my proxy
host on 192.168.1.134 but instead from 192.168.2.1/24 to 192.168.1.134. Use these rules:</p>

<pre><code class="plain iptables rules for router"># Allow traffic coming into interface br0 from proxy host 192.168.1.134 to exit interface br1 to any destination IP
iptables -I FORWARD -i br0 -o br1 -s 192.168.1.134 -j ACCEPT

# Allow traffic coming into interface br1 from any IP to exit interface br1 to proxy host 192.168.1.134
# make stricter later
iptables -I FORWARD -i br1 -o br0 -d 192.168.1.134 -j ACCEPT

PROXY_IP=192.168.1.134
PROXY_PORT=3128
LAN_IP=`nvram get br1_ipaddr`
LAN_NET=$LAN_IP/`nvram get br1_netmask`

# Modify the destination address of packets as soon as they come in.
# Change their destination address to the squid proxy on 192.168.1.134:3128.
# Only change packets matching these criteria: came into the br1 interface, are TCP packets, destined for port 80.
# This redirects HTTP traffic from the guest WiFi to the squid proxy.
iptables -t nat -A PREROUTING -i br1 -p tcp --dport 80 -j DNAT --to $PROXY_IP:$PROXY_PORT

# Modify the destination address of packets as they are about to go out.
# Change their destination address to the br1 interface's IP, ie the virtual Wifi's router IP of 192.168.2.1.
# Only change packets matching these criteria: leaving the br1 interface, have a source address
# from the 192.168.2.1/24 subnet, are TCP packets, destined for the proxy IP.
# This makes the squid proxy return HTTP requests back to the guest Wifi, I think...
iptables -t nat -I POSTROUTING -o br1 -s $LAN_NET -d $PROXY_IP -p tcp -j SNAT --to $LAN_IP

# Allow traffic coming into the br1 interface and leaving br0 with a source IP from the guest WiFi.
# Packets have to be TCP and destined for the squid proxy's port.
iptables -I FORWARD -i br1 -o br0 -s $LAN_NET -d $PROXY_IP -p tcp --dport $PROXY_PORT -j ACCEPT
</code></pre>

<p>Result!</p>

<blockquote class="twitter-tweet" lang="en"><p>I just turned the Internet upside down! I&#39;m so proud of myself. <a href="http://t.co/FhqI0qPP1j">pic.twitter.com/FhqI0qPP1j</a></p>&mdash; David Xia (@davidxia_) <a href="https://twitter.com/davidxia_/status/576614894767890432">March 14, 2015</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>



]]></content>
  </entry>
  
</feed>
